<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sportsfit.shop.repository.MemberMapper">

    <!-- Member ResultMap -->
    <resultMap id="memberMap" type="MemberVo">
        <id property="memberId" column="member_id"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="point" column="point"/>
        <result property="del" column="del"/>
        <result property="social" column="social"/>
        <collection property="roles" ofType="RoleVo" resultMap="roleResultMap"/>
    </resultMap>

    <!-- Role ResultMap -->
    <resultMap id="roleResultMap" type="RoleVo">
        <result property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
    </resultMap>

    <!-- 이메일로 회원 조회 -->
    <select id="findMemberByEmail" parameterType="String" resultMap="memberMap">
        SELECT m.member_id,
        m.password,
        m.name,
        m.email,
        m.del,
        m.social,
        r.role_id,
        r.role_name
        FROM member m
        LEFT JOIN member_roles mr ON m.member_id = mr.member_id
        LEFT JOIN roles r ON mr.role_id = r.role_id
        WHERE m.email = #{email}
    </select>

    <!-- ID로 회원 조회 -->
    <select id="findMemberById" parameterType="long" resultMap="memberMap">
        SELECT m.member_id,
        m.password,
        m.name,
        m.email,
        m.point,
        m.del,
        m.social,
        r.role_id,
        r.role_name
        FROM member m
        LEFT JOIN member_roles mr ON m.member_id = mr.member_id
        LEFT JOIN roles r ON mr.role_id = r.role_id
        WHERE m.member_id = #{memberId}
    </select>

    <!-- 회원 저장 -->
    <insert id="saveMember" parameterType="MemberVo"
            useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (name, email, password, social)
        VALUES (#{name}, #{email}, #{password}, #{social})
    </insert>

    <!-- 회원-역할 관계 삽입 -->
    <insert id="insertMemberRole" parameterType="MemberRoleVo">
        INSERT INTO member_roles (member_id, role_id)
        VALUES (#{memberId}, #{roleId})
    </insert>

    <!-- 회원 업데이트 -->
    <update id="updateMember" parameterType="MemberVo">
        UPDATE member
        SET name = #{name},
            email = #{email},
            password = #{password}
        WHERE member_id = #{memberId}
    </update>

    <!-- 회원 삭제 -->
    <update id="deleteMember" parameterType="long">
        UPDATE member
        SET del = 1
        WHERE member_id = #{memberId}
    </update>

    <!-- 회원-역할 관계 삭제 -->
    <delete id="deleteMemberRole" parameterType="MemberRoleVo">
        DELETE FROM member_roles
        WHERE member_id = #{memberId} AND role_id = #{roleId}
    </delete>

    <!-- 전체 회원 목록 조회 -->
    <select id="findAllMembers" resultMap="memberMap">
        SELECT m.member_id,
        m.password,
        m.name,
        m.email,
        m.point,
        m.del,
        m.social,
        r.role_id,
        r.role_name
        FROM member m
        LEFT JOIN member_roles mr ON m.member_id = mr.member_id
        LEFT JOIN roles r ON mr.role_id = r.role_id
    </select>

    <!-- 탈퇴하지 않은 회원 목록 조회 -->
    <select id="findAllActiveMembers" resultMap="memberMap">
        SELECT m.member_id,
        m.password,
        m.name,
        m.email,
        m.point,
        m.del,
        m.social,
        r.role_id,
        r.role_name
        FROM member m
        LEFT JOIN member_roles mr ON m.member_id = mr.member_id
        LEFT JOIN roles r ON mr.role_id = r.role_id
        WHERE m.del = 0
    </select>

    <!-- 비밀번호와 소셜 상태 업데이트 (소셜회원 -> 일반회원 전환) -->
    <update id="updatePasswordAndSocial">
        UPDATE member
        SET password = #{password},
            social = false
        WHERE email = #{email}
    </update>

</mapper>
